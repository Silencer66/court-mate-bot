import { Context } from "telegraf";
import { SurveyService } from "@/services/surveyService";

interface SurveyContext extends Context {
    match?: RegExpMatchArray;
}

export class SurveyHandler {
    constructor(private surveyService: SurveyService) {}

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private surveyStates = new Map<number, string>();

    async handleLevelAnswer(ctx: SurveyContext) {
        const telegramId = ctx.from?.id;
        if (!telegramId) return;

        const currentStep = this.surveyStates.get(telegramId);
        if (!currentStep || currentStep !== "level") return;

        const levelOptions = [
            "üéØ –ù–æ–≤–∏—á–æ–∫ (–∏–≥—Ä–∞—é –º–µ–Ω—å—à–µ –≥–æ–¥–∞)",
            "üèÜ –õ—é–±–∏—Ç–µ–ª—å (–∏–≥—Ä–∞—é 1-3 –≥–æ–¥–∞)",
            "‚≠ê –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–∏–≥—Ä–∞—é 3-5 –ª–µ—Ç)",
            "üî• –≠–∫—Å–ø–µ—Ä—Ç (–∏–≥—Ä–∞—é –±–æ–ª—å—à–µ 5 –ª–µ—Ç)",
        ];

        const answer = levelOptions[parseInt(ctx.match?.[1] || "0")];
        if (!answer) return;

        const result = await this.surveyService.processLevelAnswer(
            telegramId,
            answer
        );

        this.surveyStates.set(telegramId, "experience");

        const keyboard = {
            inline_keyboard: result.options.map((option, index) => [
                {
                    text: option,
                    callback_data: `survey_experience_${index}`,
                },
            ]),
        };

        ctx.editMessageText(result.message, { reply_markup: keyboard });
    }

    async handleExperienceAnswer(ctx: SurveyContext) {
        const telegramId = ctx.from?.id;
        if (!telegramId) return;

        const currentStep = this.surveyStates.get(telegramId);
        if (!currentStep || currentStep !== "experience") return;

        const experienceOptions = [
            "üÜï –ú–µ–Ω—å—à–µ –≥–æ–¥–∞",
            "üìñ 1-3 –≥–æ–¥–∞",
            "üìö 3-5 –ª–µ—Ç",
            "üéì –ë–æ–ª—å—à–µ 5 –ª–µ—Ç",
        ];

        const answer = experienceOptions[parseInt(ctx.match?.[1] || "0")];
        if (!answer) return;

        const result = await this.surveyService.processExperienceAnswer(
            telegramId,
            answer
        );

        this.surveyStates.set(telegramId, "rating");

        const keyboard = {
            inline_keyboard: result.options.map((option, index) => [
                {
                    text: option,
                    callback_data: `survey_rating_${index}`,
                },
            ]),
        };

        ctx.editMessageText(result.message, { reply_markup: keyboard });
    }

    async handleRatingAnswer(ctx: SurveyContext) {
        const telegramId = ctx.from?.id;
        if (!telegramId) return;

        const currentStep = this.surveyStates.get(telegramId);
        if (!currentStep || currentStep !== "rating") return;

        const ratingOptions = [
            "ü•â 1000-1200 (–Ω–æ–≤–∏—á–æ–∫)",
            "ü•à 1200-1400 (–ª—é–±–∏—Ç–µ–ª—å)",
            "ü•á 1400-1600 (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)",
            "üëë 1600+ (—ç–∫—Å–ø–µ—Ä—Ç)",
        ];

        const answer = ratingOptions[parseInt(ctx.match?.[1] || "0")];
        if (!answer) return;

        const result = await this.surveyService.processRatingAnswer(
            telegramId,
            answer
        );

        this.surveyStates.set(telegramId, "courtType");

        const keyboard = {
            inline_keyboard: result.options.map((option, index) => [
                {
                    text: option,
                    callback_data: `survey_court_${index}`,
                },
            ]),
        };

        ctx.editMessageText(result.message, { reply_markup: keyboard });
    }

    async handleCourtTypeAnswer(ctx: SurveyContext) {
        const telegramId = ctx.from?.id;
        if (!telegramId) return;

        const currentStep = this.surveyStates.get(telegramId);
        if (!currentStep || currentStep !== "courtType") return;

        const courtOptions = ["üü¢ –•–∞—Ä–¥", "üü§ –ì—Ä—É–Ω—Ç", "üå± –¢—Ä–∞–≤–∞", "üî¥ –ö–æ–≤–µ—Ä"];

        const answer = courtOptions[parseInt(ctx.match?.[1] || "0")];
        if (!answer) return;

        const result = await this.surveyService.processCourtTypeAnswer(
            telegramId,
            answer
        );

        this.surveyStates.set(telegramId, "district");

        ctx.editMessageText(result.message);
    }

    async handleDistrictAnswer(ctx: Context) {
        const telegramId = ctx.from?.id;
        if (!telegramId) return;

        const currentStep = this.surveyStates.get(telegramId);
        if (!currentStep || currentStep !== "district") return;

        const messageText =
            ctx.message && "text" in ctx.message ? ctx.message.text : "";
        const result = await this.surveyService.processDistrictAnswer(
            telegramId,
            messageText || ""
        );

        this.surveyStates.set(telegramId, "availability");

        ctx.reply(result.message);
    }

    async handleAvailabilityAnswer(ctx: Context) {
        const telegramId = ctx.from?.id;
        if (!telegramId) return;

        const currentStep = this.surveyStates.get(telegramId);
        if (!currentStep || currentStep !== "availability") return;

        const messageText =
            ctx.message && "text" in ctx.message ? ctx.message.text : "";
        const result = await this.surveyService.processAvailabilityAnswer(
            telegramId,
            messageText || ""
        );

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
        this.surveyStates.delete(telegramId);

        ctx.reply(result.message);
    }

    setSurveyState(telegramId: number, step: string) {
        this.surveyStates.set(telegramId, step);
    }

    getSurveyState(telegramId: number) {
        return this.surveyStates.get(telegramId);
    }
}
