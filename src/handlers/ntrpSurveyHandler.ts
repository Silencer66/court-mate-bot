import { Context } from "telegraf";
import { NTRP_QUESTIONS, calculateNTRPRating } from "../services/ntrpService";
import { PlayerService } from "../services/playerService";
import { MOSCOW_DISTRICTS } from "../constants/EnvVars";

const playerService = new PlayerService();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const surveyStates = new Map<
    number,
    {
        currentQuestion: number;
        answers: Record<string, number>;
        completed: boolean;
    }
>();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ–ø—Ä–æ—Å–∞
export async function handleNTRPSurveyQuestion(ctx: Context) {
    const telegramId = ctx.from?.id;
    if (!telegramId) {
        return ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }

    const callbackData =
        ctx.callbackQuery && "data" in ctx.callbackQuery
            ? ctx.callbackQuery.data
            : undefined;
    if (!callbackData) return;

    const questionIndex = parseInt(callbackData.split("_")[3] || "0");

    if (isNaN(questionIndex) || questionIndex >= NTRP_QUESTIONS.length) {
        return ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞");
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!surveyStates.has(telegramId)) {
        surveyStates.set(telegramId, {
            currentQuestion: 0,
            answers: {},
            completed: false,
        });
    }

    const question = NTRP_QUESTIONS[questionIndex];
    if (!question) {
        return ctx.reply("–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    const message = `üìù –í–æ–ø—Ä–æ—Å ${questionIndex + 1} –∏–∑ ${NTRP_QUESTIONS.length}

${question.question}`;

    const keyboard = {
        inline_keyboard: question.options.map((option) => [
            {
                text: option.text,
                callback_data: `ntrp_answer_${question.id}_${option.value}`,
            },
        ]),
    };

    return ctx.reply(message, { reply_markup: keyboard });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
export async function handleNTRPAnswer(ctx: Context) {
    const telegramId = ctx.from?.id;
    if (!telegramId) {
        return ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }

    const callbackData =
        ctx.callbackQuery && "data" in ctx.callbackQuery
            ? ctx.callbackQuery.data
            : undefined;
    if (!callbackData) return;

    const [, , questionId, answerValue] = callbackData.split("_");
    const answer = parseFloat(answerValue || "0");

    if (isNaN(answer)) {
        return ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞");
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    const surveyState = surveyStates.get(telegramId);
    if (!surveyState) {
        return ctx.reply(
            "–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
        );
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    if (questionId) {
        surveyState.answers[questionId] = answer;
    }
    surveyState.currentQuestion++;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –æ–ø—Ä–æ—Å
    if (surveyState.currentQuestion >= NTRP_QUESTIONS.length) {
        return await completeNTRPSurvey(ctx, telegramId);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    const nextQuestion = NTRP_QUESTIONS[surveyState.currentQuestion];
    if (!nextQuestion) {
        return ctx.reply("–û—à–∏–±–∫–∞: —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    const message = `üìù –í–æ–ø—Ä–æ—Å ${surveyState.currentQuestion + 1} –∏–∑ ${
        NTRP_QUESTIONS.length
    }

${nextQuestion.question}`;

    const keyboard = {
        inline_keyboard: nextQuestion.options.map((option) => [
            {
                text: option.text,
                callback_data: `ntrp_answer_${nextQuestion.id}_${option.value}`,
            },
        ]),
    };

    return ctx.reply(message, { reply_markup: keyboard });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –ø–æ–∫—Ä—ã—Ç–∏–π —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
function createCourtTypeKeyboard(currentPreferredTypes: string[]) {
    const courtTypes = [
        { type: "HARD", text: "üèüÔ∏è –•–∞—Ä–¥ (–•–∞—Ä–¥)", emoji: "üèüÔ∏è" },
        { type: "CLAY", text: "üèüÔ∏è –ì—Ä—É–Ω—Ç (CLAY)", emoji: "üèüÔ∏è" },
        { type: "GRASS", text: "üèüÔ∏è –¢—Ä–∞–≤–∞ (GRASS)", emoji: "üèüÔ∏è" },
    ];

    const keyboard = {
        inline_keyboard: [
            courtTypes.map((court) => ({
                text: currentPreferredTypes.includes(court.type)
                    ? `${court.emoji} ‚úÖ ${court.text.split(" ")[1]}`
                    : court.text,
                callback_data: `court_type_${court.type}`,
            })),
            [
                {
                    text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä",
                    callback_data: "finish_court_selection",
                },
            ],
        ],
    };

    return keyboard;
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
async function completeNTRPSurvey(ctx: Context, telegramId: number) {
    try {
        const surveyState = surveyStates.get(telegramId);
        if (!surveyState) {
            return ctx.reply("–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        }

        // –í—ã—á–∏—Å–ª—è–µ–º NTRP —Ä–µ–π—Ç–∏–Ω–≥
        const ntrpRating = calculateNTRPRating(surveyState.answers);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await playerService.updatePlayerNTRP(BigInt(telegramId), {
            ntrp: ntrpRating,
        });

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
        surveyStates.delete(telegramId);

        const message = `üéâ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!

–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ NTRP: ${ntrpRating}

–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—è–º –∫–æ—Ä—Ç–æ–≤.
–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∏–≥—Ä–∞—Ç—å:`;

        const keyboard = createCourtTypeKeyboard([]);

        return ctx.reply(message, { reply_markup: keyboard });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞:", error);
        return ctx.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
export async function handleCourtTypeSelection(ctx: Context) {
    const telegramId = ctx.from?.id;
    if (!telegramId) {
        return ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }

    const callbackData =
        ctx.callbackQuery && "data" in ctx.callbackQuery
            ? ctx.callbackQuery.data
            : undefined;
    if (!callbackData) return;

    const courtType = callbackData.split("_")[2];
    if (!courtType) return;

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const player = await playerService.getPlayerById(BigInt(telegramId));
        if (!player) {
            return ctx.reply("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        let newPreferredCourtTypes = [...(player.preferredCourtTypes || [])];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
        const courtTypeIndex = newPreferredCourtTypes.indexOf(courtType);

        if (courtTypeIndex !== -1) {
            // –ï—Å–ª–∏ –ø–æ–∫—Ä—ã—Ç–∏–µ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ - —É–±–∏—Ä–∞–µ–º –µ–≥–æ
            newPreferredCourtTypes.splice(courtTypeIndex, 1);
            await playerService.updatePlayerCourtTypes(BigInt(telegramId), {
                preferredCourtTypes: newPreferredCourtTypes,
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            const message = `üèüÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∏–≥—Ä–∞—Ç—å:

–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${
                newPreferredCourtTypes.length > 0
                    ? newPreferredCourtTypes.join(", ")
                    : "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
            }

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–∫—Ä—ã—Ç–∏–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –µ–≥–æ –∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.`;

            const keyboard = createCourtTypeKeyboard(newPreferredCourtTypes);

            return ctx.editMessageText(message, { reply_markup: keyboard });
        } else {
            // –ï—Å–ª–∏ –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ - –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            newPreferredCourtTypes.push(courtType);
            await playerService.updatePlayerCourtTypes(BigInt(telegramId), {
                preferredCourtTypes: newPreferredCourtTypes,
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            const message = `üèüÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—Ä—ã—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∏–≥—Ä–∞—Ç—å:

–¢–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${newPreferredCourtTypes.join(", ")}

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–∫—Ä—ã—Ç–∏–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –µ–≥–æ –∏–∑ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.`;

            const keyboard = createCourtTypeKeyboard(newPreferredCourtTypes);

            return ctx.editMessageText(message, { reply_markup: keyboard });
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∫—Ä—ã—Ç–∏—è:", error);
        return ctx.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∫—Ä—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–∫—Ä—ã—Ç–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–∞–π–æ–Ω–∞
export async function handleFinishCourtSelection(ctx: Context) {
    const message = `üèüÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ä–∞–π–æ–Ω, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ.

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω:`;

    const keyboard = {
        inline_keyboard: [
            [
                {
                    text: MOSCOW_DISTRICTS.CAO.name,
                    callback_data: `district_${MOSCOW_DISTRICTS.CAO.code}`,
                },
                {
                    text: MOSCOW_DISTRICTS.SAO.name,
                    callback_data: `district_${MOSCOW_DISTRICTS.SAO.code}`,
                },
            ],
            [
                {
                    text: MOSCOW_DISTRICTS.SVAO.name,
                    callback_data: `district_${MOSCOW_DISTRICTS.SVAO.code}`,
                },
                {
                    text: MOSCOW_DISTRICTS.VAO.name,
                    callback_data: `district_${MOSCOW_DISTRICTS.VAO.code}`,
                },
            ],
            [
                {
                    text: MOSCOW_DISTRICTS.YUVAO.name,
                    callback_data: `district_${MOSCOW_DISTRICTS.YUVAO.code}`,
                },
                {
                    text: MOSCOW_DISTRICTS.YUAO.name,
                    callback_data: `district_${MOSCOW_DISTRICTS.YUAO.code}`,
                },
            ],
            [
                {
                    text: MOSCOW_DISTRICTS.YUZAO.name,
                    callback_data: `district_${MOSCOW_DISTRICTS.YUZAO.code}`,
                },
                {
                    text: MOSCOW_DISTRICTS.ZAO.name,
                    callback_data: `district_${MOSCOW_DISTRICTS.ZAO.code}`,
                },
            ],
            [
                {
                    text: MOSCOW_DISTRICTS.SZAO.name,
                    callback_data: `district_${MOSCOW_DISTRICTS.SZAO.code}`,
                },
                {
                    text: MOSCOW_DISTRICTS.ZELAO.name,
                    callback_data: `district_${MOSCOW_DISTRICTS.ZELAO.code}`,
                },
            ],
            [
                {
                    text: MOSCOW_DISTRICTS.NAO.name,
                    callback_data: `district_${MOSCOW_DISTRICTS.NAO.code}`,
                },
                {
                    text: MOSCOW_DISTRICTS.TAO.name,
                    callback_data: `district_${MOSCOW_DISTRICTS.TAO.code}`,
                },
            ],
        ],
    };

    return ctx.reply(message, { reply_markup: keyboard });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞
export async function handleDistrictSelection(ctx: Context) {
    const telegramId = ctx.from?.id;
    if (!telegramId) {
        return ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }

    const callbackData =
        ctx.callbackQuery && "data" in ctx.callbackQuery
            ? ctx.callbackQuery.data
            : undefined;
    if (!callbackData) return;

    const district = callbackData.split("_")[1] || "";

    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–π–æ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await playerService.updatePlayerDistrict(BigInt(telegramId), {
            district,
        });

        const message = `üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω.

–†–∞–π–æ–Ω: ${district}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ –∏–≥—Ä–µ!`;

        const keyboard = {
            inline_keyboard: [
                [
                    {
                        text: "üë• –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
                        callback_data: "find_partner",
                    },
                    {
                        text: "üîç –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–π–æ–Ω—É",
                        callback_data: "search_by_district",
                    },
                ],
                [
                    { text: "üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "show_profile" },
                    { text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data: "settings" },
                ],
            ],
        };

        return ctx.reply(message, { reply_markup: keyboard });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–∞:", error);
        return ctx.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
    }
}
