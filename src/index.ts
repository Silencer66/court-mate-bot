import "dotenv/config";
import { Telegraf } from "telegraf";
import { PlayerService } from "@/services/playerService";
import { SurveyService } from "@/services/surveyService";
import EnvVars from "@/constants/EnvVars";

const botToken = EnvVars.Telegram.BOT_TOKEN;
if (!botToken) {
    console.error("BOT_TOKEN is not set in environment variables");
    process.exit(1);
}

const bot = new Telegraf(botToken);
const playerService = new PlayerService();
const surveyService = new SurveyService();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const surveyStates = new Map<number, { step: string; playerId: string }>();

bot.start(async (ctx) => {
    const telegramId = ctx.from?.id;
    const firstName = ctx.from?.first_name || "–ò–≥—Ä–æ–∫";
    const username = ctx.from?.username;
    const lastName = ctx.from?.last_name;
    const languageCode = ctx.from?.language_code;
    const isBot = ctx.from?.is_bot || false;
    const isPremium = ctx.from?.is_premium;
    const addedToAttachmentMenu = ctx.from?.added_to_attachment_menu;
    const allowsWriteToPm = false; // –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ç–µ–∫—É—â–∏—Ö —Ç–∏–ø–∞—Ö Telegraf

    if (!telegramId) {
        return ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
    const existingPlayer = await playerService.getPlayerByTelegramId(
        telegramId
    );

    if (existingPlayer) {
        return ctx.reply(
            `üéæ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${firstName}!\n\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å: ${
                existingPlayer.level
            }\n–û–ø—ã—Ç: ${existingPlayer.experience} –ª–µ—Ç\n–†–µ–π—Ç–∏–Ω–≥: ${
                existingPlayer.rating
            }\n–†–∞–π–æ–Ω: ${
                existingPlayer.district || "–ù–µ —É–∫–∞–∑–∞–Ω"
            }\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`
        );
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const survey = await surveyService.startSurvey(
        telegramId,
        firstName,
        username,
        lastName,
        languageCode,
        isBot,
        isPremium,
        addedToAttachmentMenu,
        allowsWriteToPm
    );
    surveyStates.set(telegramId, {
        step: "level",
        playerId: survey.playerId.toString(),
    });

    const keyboard = {
        inline_keyboard: survey.options.map((option, index) => [
            {
                text: option,
                callback_data: `survey_level_${index}`,
            },
        ]),
    };

    ctx.reply(survey.message, { reply_markup: keyboard });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å
bot.action(/survey_level_(\d+)/, async (ctx) => {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const surveyState = surveyStates.get(telegramId);
    if (!surveyState || surveyState.step !== "level") return;

    const levelOptions = [
        "üéØ –ù–æ–≤–∏—á–æ–∫ (–∏–≥—Ä–∞—é –º–µ–Ω—å—à–µ –≥–æ–¥–∞)",
        "üèÜ –õ—é–±–∏—Ç–µ–ª—å (–∏–≥—Ä–∞—é 1-3 –≥–æ–¥–∞)",
        "‚≠ê –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–∏–≥—Ä–∞—é 3-5 –ª–µ—Ç)",
        "üî• –≠–∫—Å–ø–µ—Ä—Ç (–∏–≥—Ä–∞—é –±–æ–ª—å—à–µ 5 –ª–µ—Ç)",
    ];

    const answer = levelOptions[parseInt(ctx.match[1] || "0")];
    if (!answer) return;
    const result = await surveyService.processLevelAnswer(telegramId, answer);

    surveyStates.set(telegramId, {
        step: "experience",
        playerId: surveyState.playerId,
    });

    const keyboard = {
        inline_keyboard: result.options.map((option, index) => [
            {
                text: option,
                callback_data: `survey_experience_${index}`,
            },
        ]),
    };

    ctx.editMessageText(result.message, { reply_markup: keyboard });
});

bot.action(/survey_experience_(\d+)/, async (ctx) => {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const surveyState = surveyStates.get(telegramId);
    if (!surveyState || surveyState.step !== "experience") return;

    const experienceOptions = [
        "üÜï –ú–µ–Ω—å—à–µ –≥–æ–¥–∞",
        "üìñ 1-3 –≥–æ–¥–∞",
        "üìö 3-5 –ª–µ—Ç",
        "üéì –ë–æ–ª—å—à–µ 5 –ª–µ—Ç",
    ];

    const answer = experienceOptions[parseInt(ctx.match[1] || "0")];
    if (!answer) return;
    const result = await surveyService.processExperienceAnswer(
        telegramId,
        answer
    );

    surveyStates.set(telegramId, {
        step: "rating",
        playerId: surveyState.playerId,
    });

    const keyboard = {
        inline_keyboard: result.options.map((option, index) => [
            {
                text: option,
                callback_data: `survey_rating_${index}`,
            },
        ]),
    };

    ctx.editMessageText(result.message, { reply_markup: keyboard });
});

bot.action(/survey_rating_(\d+)/, async (ctx) => {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const surveyState = surveyStates.get(telegramId);
    if (!surveyState || surveyState.step !== "rating") return;

    const ratingOptions = [
        "ü•â 1000-1200 (–Ω–æ–≤–∏—á–æ–∫)",
        "ü•à 1200-1400 (–ª—é–±–∏—Ç–µ–ª—å)",
        "ü•á 1400-1600 (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)",
        "üëë 1600+ (—ç–∫—Å–ø–µ—Ä—Ç)",
    ];

    const answer = ratingOptions[parseInt(ctx.match[1] || "0")];
    if (!answer) return;
    const result = await surveyService.processRatingAnswer(telegramId, answer);

    surveyStates.set(telegramId, {
        step: "courtType",
        playerId: surveyState.playerId,
    });

    const keyboard = {
        inline_keyboard: result.options.map((option, index) => [
            {
                text: option,
                callback_data: `survey_court_${index}`,
            },
        ]),
    };

    ctx.editMessageText(result.message, { reply_markup: keyboard });
});

bot.action(/survey_court_(\d+)/, async (ctx) => {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const surveyState = surveyStates.get(telegramId);
    if (!surveyState || surveyState.step !== "courtType") return;

    const courtOptions = ["üü¢ –•–∞—Ä–¥", "üü§ –ì—Ä—É–Ω—Ç", "üå± –¢—Ä–∞–≤–∞", "üî¥ –ö–æ–≤–µ—Ä"];

    const answer = courtOptions[parseInt(ctx.match[1] || "0")];
    if (!answer) return;
    const result = await surveyService.processCourtTypeAnswer(
        telegramId,
        answer
    );

    surveyStates.set(telegramId, {
        step: "district",
        playerId: surveyState.playerId,
    });

    ctx.editMessageText(result.message);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–π–æ–Ω–∞
bot.hears(/.*/, async (ctx) => {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const surveyState = surveyStates.get(telegramId);
    if (!surveyState) return;

    if (surveyState.step === "district") {
        const result = await surveyService.processDistrictAnswer(
            telegramId,
            ctx.message.text || ""
        );

        surveyStates.set(telegramId, {
            step: "availability",
            playerId: surveyState.playerId,
        });

        ctx.reply(result.message);
        return;
    }

    if (surveyState.step === "availability") {
        const result = await surveyService.processAvailabilityAnswer(
            telegramId,
            ctx.message.text || ""
        );

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
        surveyStates.delete(telegramId);

        ctx.reply(result.message);
        return;
    }
});

bot.hears(/ping|–ø–∏–Ω–≥/i, (ctx) => ctx.reply("pong"));

bot.command("help", (ctx) => {
    ctx.reply(
        `üéæ CourtMate Bot - –ü–æ–º–æ—â—å\n\n` +
            `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
            `/start - –ù–∞—á–∞—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n` +
            `/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
            `/profile - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n` +
            `/find - –ù–∞–π—Ç–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n` +
            `/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞`
    );
});

bot.command("profile", async (ctx) => {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const player = await playerService.getPlayerByTelegramId(telegramId);
    if (!player) {
        return ctx.reply(
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
        );
    }

    ctx.reply(
        `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n` +
            `–ò–º—è: ${player.firstName}${
                player.lastName ? ` ${player.lastName}` : ""
            }\n` +
            `Username: ${
                player.username ? `@${player.username}` : "–ù–µ —É–∫–∞–∑–∞–Ω"
            }\n` +
            `–£—Ä–æ–≤–µ–Ω—å: ${player.level}\n` +
            `–û–ø—ã—Ç: ${player.experience} –ª–µ—Ç\n` +
            `–†–µ–π—Ç–∏–Ω–≥: ${player.rating}\n` +
            `–†–∞–π–æ–Ω: ${player.district || "–ù–µ —É–∫–∞–∑–∞–Ω"}\n` +
            `–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∫–æ—Ä—Ç—ã: ${
                player.preferredCourtTypes.join(", ") || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            }\n` +
            `–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${player.availability.join(", ") || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}`
    );
});

bot.launch().then(() => {
    console.log("Bot started with new architecture");
});

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
