import { PlayerService } from "@/services/playerService";
import { PlayerLevel, CourtType } from "@/types/tennis";

export class SurveyService {
    private playerService: PlayerService;

    constructor() {
        this.playerService = new PlayerService();
    }

    async startSurvey(
        telegramId: number,
        firstName: string,
        username?: string,
        lastName?: string,
        languageCode?: string,
        isBot: boolean = false,
        isPremium?: boolean,
        addedToAttachmentMenu?: boolean,
        allowsWriteToPm?: boolean
    ) {
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const player = await this.playerService.createPlayer(
            telegramId,
            firstName,
            username,
            lastName,
            languageCode,
            isBot,
            isPremium,
            addedToAttachmentMenu,
            allowsWriteToPm
        );

        return {
            playerId: player.id,
            currentStep: "level",
            message: this.getLevelQuestion(),
            options: this.getLevelOptions(),
        };
    }

    private getLevelQuestion(): string {
        return `üéæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CourtMate! –î–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã.\n\n–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Ç–µ–Ω–Ω–∏—Å–∞?`;
    }

    private getLevelOptions(): string[] {
        return [
            "üéØ –ù–æ–≤–∏—á–æ–∫ (–∏–≥—Ä–∞—é –º–µ–Ω—å—à–µ –≥–æ–¥–∞)",
            "üèÜ –õ—é–±–∏—Ç–µ–ª—å (–∏–≥—Ä–∞—é 1-3 –≥–æ–¥–∞)",
            "‚≠ê –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (–∏–≥—Ä–∞—é 3-5 –ª–µ—Ç)",
            "üî• –≠–∫—Å–ø–µ—Ä—Ç (–∏–≥—Ä–∞—é –±–æ–ª—å—à–µ 5 –ª–µ—Ç)",
        ];
    }

    async processLevelAnswer(
        telegramId: number,
        answer: string
    ): Promise<{ message: string; options: string[]; nextStep: string }> {
        const level = this.parseLevelAnswer(answer);
        await this.playerService.updatePlayerLevel(telegramId, level);

        return {
            message: this.getExperienceQuestion(),
            options: this.getExperienceOptions(),
            nextStep: "experience",
        };
    }

    async processExperienceAnswer(
        telegramId: number,
        answer: string
    ): Promise<{ message: string; options: string[]; nextStep: string }> {
        const experience = this.parseExperienceAnswer(answer);
        await this.playerService.updatePlayerExperience(telegramId, experience);

        return {
            message: this.getRatingQuestion(),
            options: this.getRatingOptions(),
            nextStep: "rating",
        };
    }

    async processRatingAnswer(
        telegramId: number,
        answer: string
    ): Promise<{ message: string; options: string[]; nextStep: string }> {
        const rating = this.parseRatingAnswer(answer);
        await this.playerService.updatePlayerRating(telegramId, rating);

        return {
            message: this.getCourtTypeQuestion(),
            options: this.getCourtTypeOptions(),
            nextStep: "courtType",
        };
    }

    async processCourtTypeAnswer(
        telegramId: number,
        answer: string
    ): Promise<{ message: string; nextStep: string }> {
        const courtTypes = this.parseCourtTypeAnswer(answer);
        await this.playerService.updatePreferredCourtTypes(
            telegramId,
            courtTypes
        );

        return {
            message: this.getDistrictQuestion(),
            nextStep: "district",
        };
    }

    async processDistrictAnswer(
        telegramId: number,
        answer: string
    ): Promise<{ message: string; nextStep: string }> {
        await this.playerService.updatePlayerDistrict(telegramId, answer);

        return {
            message: this.getAvailabilityQuestion(),
            nextStep: "availability",
        };
    }

    async processAvailabilityAnswer(
        telegramId: number,
        answer: string
    ): Promise<{ message: string; nextStep: string }> {
        const availability = this.parseAvailabilityAnswer(answer);
        await this.playerService.updateAvailability(telegramId, availability);

        return {
            message: this.getCompletionMessage(),
            nextStep: "completed",
        };
    }

    private parseLevelAnswer(answer: string): PlayerLevel {
        if (answer.includes("–ù–æ–≤–∏—á–æ–∫")) return PlayerLevel.BEGINNER;
        if (answer.includes("–õ—é–±–∏—Ç–µ–ª—å")) return PlayerLevel.INTERMEDIATE;
        if (answer.includes("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")) return PlayerLevel.ADVANCED;
        if (answer.includes("–≠–∫—Å–ø–µ—Ä—Ç")) return PlayerLevel.EXPERT;
        return PlayerLevel.BEGINNER;
    }

    private parseExperienceAnswer(answer: string): number {
        if (answer.includes("–º–µ–Ω—å—à–µ –≥–æ–¥–∞")) return 0;
        if (answer.includes("1-3 –≥–æ–¥–∞")) return 2;
        if (answer.includes("3-5 –ª–µ—Ç")) return 4;
        if (answer.includes("–±–æ–ª—å—à–µ 5 –ª–µ—Ç")) return 6;
        return 0;
    }

    private parseRatingAnswer(answer: string): number {
        if (answer.includes("1000-1200")) return 1100;
        if (answer.includes("1200-1400")) return 1300;
        if (answer.includes("1400-1600")) return 1500;
        if (answer.includes("1600+")) return 1700;
        return 1000;
    }

    private parseCourtTypeAnswer(answer: string): string[] {
        const courtTypes: string[] = [];
        if (answer.includes("–•–∞—Ä–¥")) courtTypes.push(CourtType.HARD);
        if (answer.includes("–ì—Ä—É–Ω—Ç")) courtTypes.push(CourtType.CLAY);
        if (answer.includes("–¢—Ä–∞–≤–∞")) courtTypes.push(CourtType.GRASS);
        if (answer.includes("–ö–æ–≤–µ—Ä")) courtTypes.push(CourtType.CARPET);
        return courtTypes.length > 0 ? courtTypes : [CourtType.HARD];
    }

    private parseAvailabilityAnswer(answer: string): string[] {
        // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        return ["weekends", "evenings"];
    }

    private getExperienceQuestion(): string {
        return `üìö –°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ —Ç–µ–Ω–Ω–∏—Å?`;
    }

    private getExperienceOptions(): string[] {
        return [
            "üÜï –ú–µ–Ω—å—à–µ –≥–æ–¥–∞",
            "üìñ 1-3 –≥–æ–¥–∞",
            "üìö 3-5 –ª–µ—Ç",
            "üéì –ë–æ–ª—å—à–µ 5 –ª–µ—Ç",
        ];
    }

    private getRatingQuestion(): string {
        return `üèÜ –ö–∞–∫–æ–π —É –≤–∞—Å —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Ç–µ–Ω–Ω–∏—Å–µ?`;
    }

    private getRatingOptions(): string[] {
        return [
            "ü•â 1000-1200 (–Ω–æ–≤–∏—á–æ–∫)",
            "ü•à 1200-1400 (–ª—é–±–∏—Ç–µ–ª—å)",
            "ü•á 1400-1600 (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)",
            "üëë 1600+ (—ç–∫—Å–ø–µ—Ä—Ç)",
        ];
    }

    private getCourtTypeQuestion(): string {
        return `üèüÔ∏è –ù–∞ –∫–∞–∫–∏—Ö –∫–æ—Ä—Ç–∞—Ö –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∏–≥—Ä–∞—Ç—å? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)`;
    }

    private getCourtTypeOptions(): string[] {
        return ["üü¢ –•–∞—Ä–¥", "üü§ –ì—Ä—É–Ω—Ç", "üå± –¢—Ä–∞–≤–∞", "üî¥ –ö–æ–≤–µ—Ä"];
    }

    private getDistrictQuestion(): string {
        return `üìç –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ?\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–ó–∞–ø–∞–¥–Ω—ã–π", "–°–µ–≤–µ—Ä–Ω—ã–π"`;
    }

    private getAvailabilityQuestion(): string {
        return `‚è∞ –ö–æ–≥–¥–∞ –≤—ã –æ–±—ã—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã –¥–ª—è –∏–≥—Ä—ã?\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º", "–ø–æ –≤–µ—á–µ—Ä–∞–º", "—É—Ç—Ä–æ–º"`;
    }

    private getCompletionMessage(): string {
        return `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\nüéØ –ò—Å–∫–∞—Ç—å —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤\nüèüÔ∏è –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∏–≥—Ä—É\nüìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`;
    }
}
